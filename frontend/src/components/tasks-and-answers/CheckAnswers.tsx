import { useParams, Navigate, Link } from 'react-router-dom';
import React, { useEffect, useState, useRef } from 'react';

import { StudentAndAnswerForCheckAnswers, SortCriteria, UserData } from '../../types';
import { useMessageHandler, getCookie } from '../../functions';
import { BASE_URL } from '../../constants';

import Modal from './ModalWindows';

import './CSS/check-answers.css';
import '../../App.css';

const CheckAnswers: React.FC<{ userData: UserData }> = ({ userData }) => {
    // ### Assigning variables/–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ###
    const criteriaOptions: SortCriteria[] = ['correct', 'alphabet', 'time', 'photo'];
    const [redirectMessage, setRedirectMessage] = useState<React.ReactNode>(null);
    const { showMessage, MessageComponent, clearMessage } = useMessageHandler();
    const [sortCriteria, setSortCriteria] = useState<SortCriteria>('correct');
    const [data, setData] = useState<StudentAndAnswerForCheckAnswers[]>();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const { schoolClass, taskListId } = useParams();
    const [redirect, setRedirect] = useState(false);
    const csrftoken = getCookie('csrftoken');
    const hasFetchedRef = useRef(false);

    // ### Sending a GET request/–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ ###
    useEffect(() => {
        const getAnswerLists = async () => {
            if (hasFetchedRef.current) return;
            hasFetchedRef.current = true;

            try {
                const getResponse = await fetch(`${BASE_URL}/task_app/v1/api-answer-list-get/${schoolClass}/${taskListId}`, {
                    headers: {
                        'Access-Control-Request-Headers': 'Content-Type',
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    method: 'GET'
                });

                if (getResponse.ok) {
                    const responseData = await getResponse.json();
                    setData(responseData);
                } else {
                    showMessage({
                        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.',
                        type: 'error',
                        duration: 3000
                    });
                }

            } catch (error) {
                showMessage({
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
                    type: 'error',
                    duration: 3000
                });
            }
        };

        getAnswerLists();
    }, []);

    // ### Sending a DELETE request/–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ ###
    const deleteTaskList = async () => {
        clearMessage();
        try {
            const postResponse = await fetch(`${BASE_URL}/task_app/v1/api-task-list-delete/${taskListId}`, {
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                },
                credentials: 'include',
                method: 'DELETE'
            });

            if (postResponse.ok) {
                setRedirectMessage(
                    <div className="success-message-container">
                        <h2 className="success-message">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
                        <div className="success-icon">‚úì</div>
                    </div>
                );
                setTimeout(() => setRedirect(true), 1500);
            } else {
                showMessage({
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞.',
                    type: 'error',
                    duration: 3000
                });
            }

        } catch (error) {
            showMessage({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
                type: 'error',
                duration: 3000
            });
        }
    };

    // ### Sending a DELETE request/–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ ###
    const archiveTaskList = async () => {
        clearMessage();
        try {
            const postResponse = await fetch(`${BASE_URL}/task_app/v1/api-task-list-archived/${taskListId}`, {
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                },
                credentials: 'include',
                method: 'PUT'
            });

            if (postResponse.ok) {
                setRedirectMessage(
                    <div className="success-message-container">
                        <h2 className="success-message">–¢–µ—Å—Ç –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</h2>
                    </div>
                );
                setTimeout(() => setRedirect(true), 1500);
            } else {
                showMessage({
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.',
                    type: 'error',
                    duration: 3000
                });
            }

        } catch (error) {
            showMessage({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
                type: 'error',
                duration: 3000
            });
        }
    };

    // ### Function for sorting data/–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ###
    const filteredData = () => {
        if (!data) return [];

        const filtered = data.filter(student_answer_and_task => {
            const fullName = `${student_answer_and_task.student.first_name} ${student_answer_and_task.student.last_name}`;
            return fullName.toLowerCase().includes(searchTerm.toLowerCase());
        });

        return filtered.sort((a, b) => {
            const aHasPhoto = a.tasks_and_answers.some(answer => answer.answer.photo_to_the_answer);
            const bHasPhoto = b.tasks_and_answers.some(answer => answer.answer.photo_to_the_answer);

            const aHasAnswered = a.student.authorized && a.tasks_and_answers.length > 0;
            const bHasAnswered = b.student.authorized && b.tasks_and_answers.length > 0;

            const aCorrectCount = a.tasks_and_answers.filter(answer =>
                answer.answer.answer === answer.task.answer_to_the_task).length;
            const bCorrectCount = b.tasks_and_answers.filter(answer =>
                answer.answer.answer === answer.task.answer_to_the_task).length;

            const aName = `${a.student.first_name} ${a.student.last_name}`;
            const bName = `${b.student.first_name} ${b.student.last_name}`;

            switch (sortCriteria) {
                case 'time':
                    if (!a.student.authorized && !b.student.authorized) return 0;
                    if (!a.student.authorized) return 1;
                    if (!b.student.authorized) return -1;

                    if (!aHasAnswered && !bHasAnswered) return 0;
                    if (!aHasAnswered) return 1;
                    if (!bHasAnswered) return -1;

                    const timeA = a.tasks_and_answers[0]?.execution_time_answer || 0;
                    const timeB = b.tasks_and_answers[0]?.execution_time_answer || 0;

                    return timeA - timeB;

                case 'photo':
                    if (!a.student.authorized && !b.student.authorized) return 0;
                    if (!a.student.authorized) return 1;
                    if (!b.student.authorized) return -1;

                    if (!aHasAnswered && !bHasAnswered) return 0;
                    if (!aHasAnswered) return 1;
                    if (!bHasAnswered) return -1;

                    return (aHasPhoto === bHasPhoto) ? 0 : aHasPhoto ? -1 : 1;

                case 'correct':
                    if (aCorrectCount === bCorrectCount) {
                        return aName.localeCompare(bName);
                    }
                    return bCorrectCount - aCorrectCount;

                case 'alphabet':
                    return aName.localeCompare(bName);

                default:
                    return 0;
            }
        });
    };

    // ### Rendering HTMLElement/–û—Ç—Ä–∏—Å–æ–≤–∫–∞ HTMLElement ###
    if (redirect) return <Navigate to='/check-answers-hub' />;

    return (
        <div className="check-answers-page">
            {!redirectMessage ? (
                <div className='check-answers-container'>
                    {userData.is_staff ? (
                        <>
                            <div className="header-section">
                                <Link to='/check-answers-hub' className='back-button'>
                                    <span className="arrow-icon">‚Üê</span> –í–µ—Ä–Ω—É—Ç—å—Å—è
                                </Link>
                                <h1 className="page-title">–û—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤ {schoolClass} –∫–ª–∞—Å—Å–∞</h1>
                            </div>

                            <div className='content-wrapper'>
                                {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                                <div className='control-panel'>
                                    <div className="search-wrapper">
                                        <input
                                            type='text'
                                            placeholder='–ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞...'
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                            className='search-input'
                                        />
                                        <span className="search-icon">üîç</span>
                                    </div>

                                    <div className="sort-section">
                                        <h2 className="sort-title">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:</h2>
                                        <div className="sort-buttons">
                                            {criteriaOptions.map((criteria) => (
                                                <button
                                                    key={criteria}
                                                    className={`sort-button ${sortCriteria === criteria ? 'active' : ''}`}
                                                    onClick={() => setSortCriteria(criteria)}>
                                                    {criteria === 'photo' ? '–§–æ—Ç–æ' :
                                                        criteria === 'correct' ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏' :
                                                            criteria === 'alphabet' ? '–ê–ª—Ñ–∞–≤–∏—Ç—É' : '–í—Ä–µ–º–µ–Ω–∏'}
                                                </button>
                                            ))}
                                        </div>
                                    </div>

                                    <button className='archive-test-button' onClick={archiveTaskList}>
                                        –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç
                                    </button>

                                    <button className='finish-test-button' onClick={deleteTaskList}>
                                        –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç
                                    </button>
                                </div>

                                {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
                                <div className="main-content">
                                    <MessageComponent />
                                    <div className='students-list'>
                                        {filteredData().length === 0 ? (
                                            <div className='no-students-message'>
                                                <h2>–£—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
                                                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
                                            </div>
                                        ) : (
                                            filteredData().map((student_answer_and_task, index) => (
                                                <div key={index} className='student-card'>
                                                    <div className="student-header">
                                                        <h2 className="student-name">
                                                            {student_answer_and_task.student.first_name} {student_answer_and_task.student.last_name}
                                                        </h2>
                                                        {student_answer_and_task.tasks_and_answers.length > 0 && (
                                                            <div className="time-badge">
                                                                {new Date(student_answer_and_task.tasks_and_answers[0].execution_time_answer * 1000)
                                                                    .toISOString()
                                                                    .substr(11, 8)}
                                                            </div>
                                                        )}
                                                    </div>

                                                    <div className="student-content">
                                                        {student_answer_and_task.student.authorized ? (
                                                            student_answer_and_task.tasks_and_answers.length === 0 ? (
                                                                <div className="no-answer-message">
                                                                    <span className="icon">‚è≥</span>
                                                                    <span>–£—á–µ–Ω–∏–∫ –µ—â–µ –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞</span>
                                                                </div>
                                                            ) : (
                                                                student_answer_and_task.tasks_and_answers.map((answer_and_task, index) => (
                                                                    <div key={index} className='answer-item'>
                                                                        <h3 className="task-title">{answer_and_task.task.title}</h3>

                                                                        {answer_and_task.answer.photo_to_the_answer ? (
                                                                            <div className="photo-section">
                                                                                <img
                                                                                    alt='–†–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞'
                                                                                    className='answer-photo'
                                                                                    onClick={() => setIsModalOpen(true)}
                                                                                    src={`${BASE_URL}${answer_and_task.answer.photo_to_the_answer}`}
                                                                                />
                                                                                <Modal
                                                                                    isOpen={isModalOpen}
                                                                                    onClose={() => setIsModalOpen(false)}
                                                                                    imageSrc={`${BASE_URL}${answer_and_task.answer.photo_to_the_answer}`}
                                                                                />
                                                                            </div>
                                                                        ) : (
                                                                            answer_and_task.task.additional_condition === 'Photo' ? (
                                                                                <div className="photo-missing">
                                                                                    <span className="icon">üì∑</span>
                                                                                    <span>–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ</span>
                                                                                </div>
                                                                            ) : null
                                                                        )}

                                                                        <div className="answer-section">
                                                                            {answer_and_task.answer.answer ? (
                                                                                <div className={`answer-text ${answer_and_task.answer.answer === answer_and_task.task.answer_to_the_task ? 'correct' : 'incorrect'}`}>
                                                                                    <span>–û—Ç–≤–µ—Ç: {answer_and_task.answer.answer}</span>
                                                                                    <span className="verdict">
                                                                                        {answer_and_task.answer.answer === answer_and_task.task.answer_to_the_task ?
                                                                                            '‚úì –í–µ—Ä–Ω–æ' : '‚úó –ù–µ–≤–µ—Ä–Ω–æ'}
                                                                                    </span>
                                                                                </div>
                                                                            ) : (
                                                                                <div className="answer-missing">
                                                                                    <span className="icon">‚ùå</span>
                                                                                    <span>–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</span>
                                                                                </div>
                                                                            )}
                                                                        </div>
                                                                    </div>
                                                                ))
                                                            )
                                                        ) : (
                                                            <div className="not-registered-message">
                                                                <span className="icon">üë§</span>
                                                                <span>–£—á–µ–Ω–∏–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</span>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            ))
                                        )}
                                    </div>
                                </div>
                            </div>
                        </>
                    ) : (
                        <div className="access-denied">
                            <h2>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</h2>
                            <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤</p>
                        </div>
                    )}
                </div>
            ) : (
                <div className='redirect-message-container'>
                    {redirectMessage}
                </div>
            )}
        </div>
    );
}

export default CheckAnswers;